{"version":3,"sources":["quizService.js","components/styled/index.js","components/Question.js","utils.js","components/Result.js","components/Quiz.js","components/StartingPage.js","components/ThemeSwitch.js","App.js","index.js"],"names":["a","axios","get","response","data","config","url","options","category","push","difficulty","join","fetchCategories","fetchQuestions","themes","dark","colors","primaryBg","primaryText","secondaryBg","active","buttonHover","answerhover","light","GlobalStyles","createGlobalStyle","props","theme","MainWrapper","styled","div","StartingWrapper","StartingHeading","h1","StyledLabel","label","StyledSelect","select","StyledButton","button","QuestionWrapper","Answer","css","AnswerWrapper","ResultWrapper","ErrorMessage","Question","quest","onAnswer","useState","answers","setAnswers","selected","setSelected","useEffect","array","t","i","m","length","Math","floor","random","shuffle","correct_answer","incorrect_answers","dangerouslySetInnerHTML","__html","question","map","ans","key","onClick","disabled","Result","correct","total","onRestart","Quiz","questions","setQuestions","current","setCurrent","fetchFailed","setFetchFailed","quizService","then","response_code","results","setTimeout","answer","concat","reduce","computeCorrects","q","StartingPage","onStart","setCategory","setDifficulty","id","name","categories","setCategories","trivia","trivia_categories","onChange","e","parseInt","target","value","cat","level","str","toUpperCase","slice","Switch","ThemeSwitch","toggleTheme","src","alt","App","initialConfig","setTheme","started","setStarted","quizConfig","setQuizConfig","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8b8fdfd.chunk.js","sourcesContent":["import axios from 'axios';\n\nasync function fetchCategories() {\n    const response = await axios.get('https://opentdb.com/api_category.php');\n    return response.data;\n}\n\nasync function fetchQuestions(config) {\n    let url = 'https://opentdb.com/api.php?amount=10&type=multiple&';\n    const options = [];\n    if(config.category) options.push(`category=${config.category}`);\n    if(config.difficulty) options.push(`difficulty=${config.difficulty}`);\n    url += options.join('&');\n    const response = await axios.get(url);\n    return response;\n}\n\nexport default { fetchCategories, fetchQuestions }","import styled, { createGlobalStyle, css } from 'styled-components';\n\nexport const themes = {\n    dark: {\n        colors: {\n            primaryBg: '#1a1a2e',\n            primaryText: '#ececec',\n            secondaryBg: '#e94560',\n            active: '#0f3460',\n            buttonHover: '#ee6d82',\n            answerhover: '#e94560'\n        }\n    },\n    light: {\n        colors: {\n            primaryBg: '#fff0f0',\n            primaryText: '#463333',\n            secondaryBg: '#ebd4d4',\n            active: '#ebd4d4',\n            buttonHover: '#b89494',\n            answerhover: '#835858'\n        }\n    }\n};\n\nexport const GlobalStyles = createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        font-family: Roboto;\n    }\n\n    #root {\n        height: 100vh;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: ${props => props.theme.colors.primaryBg};\n    }\n`;\n\nexport const MainWrapper = styled.div`\n    padding: 5rem;\n    width: 800px;\n    margin: 0 auto;\n    @media (max-width: 500px) {\n        padding: 0.5rem;\n        width: 100%;\n    }\n`;\n\nexport const StartingWrapper = styled.div`\n    padding: 1rem;\n`;\n\nexport const StartingHeading = styled.h1`\n    color: ${props => props.theme.colors.primaryText};\n    font-weight: 600;\n    margin: 1.5rem 0;\n    @media (max-width: 500px) {\n        font-size: 1.5rem;\n    }\n`;\n\nexport const StyledLabel = styled.label`\n    display: block;\n    font-size: 1.3em;\n    margin: 0.5em 0;\n    color: ${props => props.theme.colors.primaryText}\n`;\n\nexport const StyledSelect = styled.select`\n    font-size: 1.2em;\n    display: block;\n    width: 100%;\n    padding: 0.6em;\n    border-radius: 0.2em;\n    border: 1px solid green;\n    margin-bottom: 1.5em;\n    background-color: white;\n    @media (max-width: 500px) {\n        padding: 0.3em;\n        font-size: 1rem;\n    }\n`;\n\nexport const StyledButton = styled.button`\n    font-size: 1.2rem;\n    padding: .5em 2.2em;\n    border: 3px solid white;\n    border-radius: 4px;\n    display: block;\n    margin: 0 auto;\n    cursor: pointer;\n    background-color: ${props => props.theme.colors.secondaryBg};\n    color: ${props => props.theme.colors.primaryText};\n    &:hover {\n        background-color: ${props => props.theme.colors.buttonHover};\n    }\n    &:focus {\n        outline: none;\n    }\n`;\n\nexport const QuestionWrapper = styled.div`\n    padding: 3rem 0.2rem;\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n    color: ${props => props.theme.colors.primaryText};\n    @media (max-width: 500px) {\n        font-size: 1.5rem;\n        padding: 1.5rem 1rem;\n    }\n`;\n\nexport const Answer = styled.div`\n    padding: 1rem 2.5rem;\n    border: 2px solid black;\n    border-radius: 8px;\n    cursor: pointer;\n    ${props => props.active ?\n        css`\n            background-color: ${props => props.theme.colors.active};\n            color: white;\n            border-color: white;\n        ` :\n        css`\n            border-color: ${props => props.theme.colors.primaryText};\n            color: ${props => props.theme.colors.primaryText};\n            &:hover {\n                background-color: ${props => props.theme.colors.answerhover};\n                color: black;\n            }\n        `\n    }\n    @media (max-width: 500px) {\n        border-radius: 0;\n        padding: 0.75rem 2rem;\n        text-align: center;\n    }\n`;\n\nexport const AnswerWrapper = styled.div`\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: 1fr 1fr;\n    margin-bottom: 3rem;\n\n    @media (max-width: 500px) {\n        grid-template-columns: 1fr;\n        gap: 0.3rem;\n        margin-bottom: 1.5rem;\n        padding: 0.3rem;\n        & ${Answer} {\n            padding: 1rem 1rem;\n        }\n    }\n`;\n\nexport const ResultWrapper = styled.div`\n    margin: 0 auto;\n    width: 75%;\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    color: ${props => props.theme.colors.primaryText}\n`;\n\nexport const ErrorMessage = styled.div`\n    color: ${props => props.theme.colors.primaryText};\n    padding: 0.5rem;\n`;","import React, { useEffect, useState } from 'react';\nimport { shuffle } from '../utils';\nimport { StyledButton, QuestionWrapper, AnswerWrapper, Answer } from './styled';\n\nexport default function Question({ quest, onAnswer }) {\n    const [answers, setAnswers]= useState([]);\n    const [selected, setSelected] = useState('');\n    useEffect(() => {\n        setAnswers(shuffle([quest.correct_answer, ...quest.incorrect_answers]));\n    }, [quest]);\n\n    function submitAnswer() {\n        onAnswer(selected);\n        setSelected('');\n    }\n    \n    return (\n        <div>\n            <QuestionWrapper dangerouslySetInnerHTML={{ __html: quest.question}}>\n            </QuestionWrapper>\n            <AnswerWrapper>\n                {answers.map(ans => (\n                    <Answer key={ans} onClick={() => setSelected(ans)} dangerouslySetInnerHTML={{ __html: ans}} active={selected === ans}>\n                    </Answer>\n                ))}\n            </AnswerWrapper>\n            <StyledButton disabled={!selected.length} onClick={submitAnswer}>Next</StyledButton>\n        </div>\n    );\n}","export function capitalize(str) {\n    return str[0].toUpperCase() + str.slice(1);\n}\n\nexport function computeCorrects(answers) {\n    return answers.reduce((total, [correct, ans]) => correct === ans ? total + 1 : total, 0);\n}\n\nexport function shuffle(array) {\n    var m = array.length, t, i;\n    // While there remain elements to shuffle…\n    while (m) {\n        // Pick a remaining element…\n        i = Math.floor(Math.random() * m--);\n        // And swap it with the current element.\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n    return array;\n}\n","import React from 'react';\nimport { StyledButton, ResultWrapper } from './styled';\n\nexport default function Result({ correct, total, onRestart }) {\n    return (\n        <div>\n            <ResultWrapper>You got {correct}/{total}!</ResultWrapper>\n            <StyledButton onClick={onRestart}>Start Again</StyledButton>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport quizService from '../quizService';\nimport { computeCorrects } from '../utils';\nimport Question from './Question';\nimport Result from './Result';\nimport { ErrorMessage } from './styled';\n\nexport default function Quiz({ config, onRestart }) {\n    const [questions, setQuestions] = useState([]);\n    const [current, setCurrent] = useState(0);\n    const [answers, setAnswers] = useState([]);\n    const [fetchFailed, setFetchFailed] = useState(false);\n\n    useEffect(() => {\n        quizService.fetchQuestions(config)\n            .then(response => {\n                if(response.data.response_code === 0) { \n                    setQuestions(response.data.results) \n                } else {\n                    setFetchFailed(true);\n                    setTimeout(onRestart, 5000);\n                }\n            })\n    }, []);\n\n    function submitAnswer(answer) {\n        setAnswers(answers.concat(answer));\n        setCurrent(current + 1);\n    }\n\n    function corrects() {\n        return computeCorrects(questions.map((q, i) => [q.correct_answer, answers[i]]));\n    }\n\n    if (questions.length) {\n        return (\n            <div>\n                {current < questions.length ?\n                    <Question quest={questions[current]} onAnswer={submitAnswer} /> :\n                    <Result\n                        total={questions.length}\n                        correct={corrects()}\n                        onRestart={onRestart}\n                    />\n                }\n            </div>\n        );\n    } else if (fetchFailed) {\n        return (\n            <ErrorMessage>\n                <h2>There don't seem to be enough questions in that category for that level of difficulty :/</h2>\n                <p>You will be returned to start page in 5 seconds</p>\n            </ErrorMessage>\n        );\n    } else {\n        return null;\n    }\n}","import React, { useEffect, useState } from 'react';\nimport quizService from '../quizService';\nimport { capitalize } from '../utils';\nimport { StartingWrapper, StyledSelect, StyledLabel, StyledButton, StartingHeading } from './styled';\n\nexport default function StartingPage({ onStart }) {\n    const [category, setCategory] = useState(0);\n    const [difficulty, setDifficulty] = useState('Any Difficulty');\n    const [categories, setCategories] = useState([{ id: 0, name: 'Any Category' }]);\n\n    useEffect(() => {\n        quizService.fetchCategories()\n            .then(trivia => {\n                setCategories([...categories, ...trivia.trivia_categories]);\n            });\n    }, []);\n\n    const diffLevels = ['Any Difficulty', 'easy', 'medium', 'hard'];\n\n    function handleDifficultyChange(e) {\n        setDifficulty(e.target.value)\n    }\n\n    function handleCategoryChange(e) {\n        setCategory(parseInt(e.target.value));\n    }\n\n    function startQuiz() {\n        const config = {};\n        if (category !== 0) config.category = category;\n        if (difficulty !== 'Any Difficulty') config.difficulty = difficulty;\n        onStart(config);\n    }\n\n    return (\n        <StartingWrapper>\n            <StartingHeading>Welcome to trivia quiz!</StartingHeading>\n            <div>\n                <StyledLabel>Select Category:</StyledLabel>\n                <StyledSelect onChange={handleCategoryChange}>\n                    {categories.map(cat => (\n                        <option value={cat.id} key={cat.id}>{cat.name}</option>\n                    ))}\n                </StyledSelect>\n            </div>\n            <div>\n                <StyledLabel>Select Difficulty:</StyledLabel>\n                <StyledSelect value={difficulty} onChange={handleDifficultyChange}>\n                    {diffLevels.map(level => (\n                        <option key={level} value={level}>{capitalize(level)}</option>\n                    ))}\n                </StyledSelect>\n            </div>\n            <StyledButton onClick={startQuiz}>Start</StyledButton>\n        </StartingWrapper>\n    );\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst Switch = styled.div`\n    width: 30px;\n    height: 30px;\n    position: absolute;\n    top: 1rem;\n    right: 1.5rem;\n    cursor: pointer;\n    & img {\n        width: 100%;\n    }\n    @media (max-width: 500px) {\n        right: 1rem;\n    }\n`;\n\nexport default function ThemeSwitch({ theme, toggleTheme }) {\n    return (\n        <Switch onClick={toggleTheme}>\n            <img src={theme === 'light' ? 'sun.svg' : 'moon.svg'} alt='' />\n        </Switch>\n    );\n}","import React, { useState } from 'react';\nimport Quiz from './components/Quiz';\nimport StartingPage from './components/StartingPage';\nimport { MainWrapper, GlobalStyles } from './components/styled';\nimport { ThemeProvider } from 'styled-components';\nimport { themes } from './components/styled';\nimport ThemeSwitch from './components/ThemeSwitch';\n\nfunction App() {\n    const initialConfig = {\n        category: 0,\n        difficulty: 'Any Difficulty'\n    };\n    const [theme, setTheme] = useState('dark');\n    const [started, setStarted] = useState(false);\n    const [quizConfig, setQuizConfig] = useState(initialConfig);\n\n    function onStart(config) {\n        setQuizConfig(config);\n        setStarted(true);\n    }\n\n    function onRestart() {\n        setStarted(false);\n        setQuizConfig(initialConfig)\n    }\n\n    return (\n        <ThemeProvider theme={themes[theme]}>\n            <GlobalStyles />\n            <ThemeSwitch  theme={theme} toggleTheme={() => setTheme(theme === 'dark' ? 'light' : 'dark')} />\n            <MainWrapper>\n                {!started ? <StartingPage onStart={onStart} /> : <Quiz config={quizConfig} onRestart={onRestart} />}\n            </MainWrapper>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}